{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\Chip.svelte",
    "..\\Icon.svelte",
    "..\\Snackbar.svelte",
    "..\\Label.svelte",
    "..\\Underline.svelte",
    "..\\Waypoint.svelte",
    "..\\Header.svelte",
    "..\\LoadingSpinner.svelte",
    "..\\Mapbox.svelte",
    "..\\MaterialListItem.svelte",
    "..\\EditProfile.svelte",
    "..\\Profile.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { scale } from \"svelte/transition\";\n  import createRipple from \"../Ripple/ripple.js\";\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n  import Icon from \"../Icon\";\n\n  let className = \"\";\n  export {className as class};\n  export let removable = false;\n  export let icon = \"\";\n  export let outlined = false;\n  export let selected = false;\n  export let selectable = true;\n  export let color = \"primary\";\n  export let remove = \"\";\n  export let add = \"\";\n  export let replace = {};\n\n  $: ripple = createRipple(color);\n\n  let value = true;\n\n  const dispatch = createEventDispatcher();\n\n  function close() {\n    dispatch(\"close\");\n    value = false;\n  }\n\n  function select() {\n    if (!selectable) return;\n\n    selected = true;\n  }\n\n  const { bg, txt, border } = utils(color);\n\n  const cb = new ClassBuilder();\n\n  $: classes = cb\n    .flush()\n    .add('relative overflow-hidden flex items-center rounded-full px-2 py-1')\n    .add('bg-transparent border', outlined)\n    .add('border-gray-400 border-solid hover:bg-gray-50 dark-hover:bg-dark-400 bg-gray-300 dark:bg-dark-600', !selected)\n    .add(`${border()} dark:${border('800')} ${txt()} ${bg(100)} hover:${bg(50)}`, selected)\n    .remove(remove)\n    .replace(replace)\n    .add(add)\n    .get();\n\n  const props = filterProps([\n    'removable',\n    'icon',\n    'outlined',\n    'selected',\n    'selectable',\n    'color',\n  ], $$props);\n\n  $: iconClass = selected ? `hover:${bg(300)} ${bg(400)}` : \"hover:bg-gray-400 bg-gray-500 dark:bg-gray-800\";\n\n   $: c = cb\n      .flush()\n      .add(className)\n      .get();\n</script>\n\n<style>\n  .p-1\\/2 {\n    padding: 0.125rem;\n  }\n</style>\n\n{#if value}\n  <span class=\"{c} mx-1 inline-block\" out:scale={{ duration: 100 }}>\n    <button\n      class={classes}\n      on:click\n      use:ripple\n      {...props}\n      on:click={select}>\n      {#if icon}\n        <Icon small class={selected ? txt(400) : 'text-gray-600'}>\n          {icon}\n        </Icon>\n      {/if}\n      <span class=\"px-2 text-sm\">\n        <slot />\n      </span>\n      {#if removable}\n        <span\n          class=\"rounded-full p-1/2 inline-flex items-center cursor-pointer {iconClass}\"\n          on:click|stopPropagation={close}>\n          <Icon class=\"text-white dark:text-white\" xs>clear</Icon>\n        </span>\n      {/if}\n    </button>\n  </span>\n{/if}\n",
    "<script>\n  let className = \"\";\n  export {className as class};\n  export let small = false;\n  export let xs = false;\n  export let reverse = false;\n  export let tip = false;\n  export let color = \"default\";\n</script>\n\n<style>\n  .reverse {\n    transform: rotate(180deg);\n  }\n\n  .tip {\n    transform: rotate(90deg);\n  }\n</style>\n\n<i\n  aria-hidden=\"true\"\n  class=\"material-icons icon text-xl {className} transition\"\n  class:reverse\n  class:tip\n  on:click\n  class:text-base={small}\n  class:text-xs={xs}\n  style={color ? `color: ${color}` : ''}>\n  <slot />\n</i>\n",
    "<script context=\"module\">\n  import { writable } from \"svelte/store\";\n  \n  const queue = writable([]);\n  let running = false;\n</script>\n\n<script>\n  import { fade, scale } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n\n  import { quadOut, quadIn } from \"svelte/easing\";\n  import Button from \"../Button\";\n  import { Spacer } from \"../Util\";\n  import utils, { ClassBuilder } from \"../../utils/classes.js\";\n\n  export let value = false;\n  export let timeout = 2000;\n  export let inProps = { duration: 100, easing: quadIn };\n  export let outProps = { duration: 100, easing: quadOut, delay: 150 };\n  export let color = \"gray\";\n  export let text = \"white\";\n  export let top = false;\n  export let bottom = true;\n  export let right = false;\n  export let left = false;\n  export let noAction = true;\n  export let hash = false;\n\n  const dispatch = createEventDispatcher();\n\n  const classesDefault = `pointer-events-auto flex absolute py-2 px-4 z-30 mb-4 content-between mx-auto\n      rounded items-center elevation-2 h-12`;\n  const wrapperDefault = \"fixed w-full h-full flex items-center justify-center pointer-events-none\";\n\n  let className = classesDefault;\n  export {className as class};\n  export let classes = wrapperDefault;\n\n  const cb = new ClassBuilder(className, classesDefault);\n  const wrapperCb = new ClassBuilder(classes, wrapperDefault);\n\n  let wClasses = i => i;\n  let tm;\n  let node;\n\n  let bg = () => {};\n\n  $: {\n    const u = utils(color || \"gray\");\n    bg = u.bg;\n  }\n\n  $: {\n    hash = hash || (value ? btoa(`${value}${new Date().valueOf()}`) : null);\n    value = value;\n  }\n\n  $: toggler = () => toggle(value, hash);\n\n  $: if (value) {\n    queue.update(u => [...u, toggler]);\n  }\n\n  $: if (!running && value && $queue.length) {\n    $queue.shift()();\n  }\n\n  $: if (!value) clearTimeout(tm);\n\n  function toggle(h, id) {\n    if (value === false && running === false) {\n      return;\n    }\n    hash = running = value = id;\n\n    if (!timeout) return;\n\n    tm = setTimeout(() => {\n      value = running = hash = false;\n      dispatch(\"finish\");\n\n      if ($queue.length) {\n        $queue.shift()();\n      }\n    }, timeout);\n  }\n\n  $: c = cb\n      .flush()\n      .add(bg(800), color)\n      .add(\"right-0 mr-2\", right)\n      .add(\"top-0 mt-2\", top)\n      .add(\"left-0 ml-2\", left)\n      .add(\"bottom-0\", bottom)\n      .add(\"snackbar\", !noAction)\n      .get();\n\n  // for some reason it doesn't get updated otherwise\n  $: if (node) node.classList = c;\n\n  wClasses = wrapperCb\n    .flush()\n    .add(`text-${text}`)\n    .get();\n</script>\n\n<style>\n  .snackbar {\n    min-width: 344px;\n  }\n</style>\n\n{#if value && (running === hash)}\n  <div\n    class=\"fixed w-full h-full top-0 left-0 z-30 pointer-events-none\"\n  >\n    <div class={wClasses}>\n      <div\n        bind:this={node}\n        in:scale={inProps}\n        out:fade={outProps}\n        on:click={() => value = false}>\n        <slot /> \n        {#if !noAction}\n          <Spacer />\n          <slot name=\"action\">\n            {#if !timeout}\n              <Button text on:click={() => value = false}>Close</Button>\n            {/if}\n          </slot>\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n  let className = \"\";\n  export {className as class};\n  export let focused = false;\n  export let error = false;\n  export let outlined = false;\n  export let labelOnTop = false;\n  export let prepend = false;\n  export let color = \"primary\";\n  // for outlined button label\n  export let bgColor = \"white\";\n\n  let labelDefault = `pt-4 absolute top-0 label-transition block pb-2 px-4 pointer-events-none cursor-text`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let labelClasses = labelDefault;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(labelClasses, labelDefault);\n\n  let lClasses = i => i;\n\n  $: lClasses = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('text-error-500', focused && error)\n      .add('label-top text-xs', labelOnTop)\n      .remove('pt-4 pb-2 px-4 px-1 pt-0', labelOnTop && outlined)\n      .add(`ml-3 p-1 pt-0 mt-0 bg-${bgColor} dark:bg-dark-500`, labelOnTop && outlined)\n      .remove('px-4', prepend)\n      .add('pr-4 pl-10', prepend)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'color'\n  ], $$props);\n</script>\n\n<style>\n.label-top {\n  line-height: 0.05;\n}\n.label-transition {\n  transition: font-size 0.05s, line-height 0.1s;\n}\n</style>\n\n<label class=\"{lClasses} {className}\" {...props}>\n  <slot />\n</label>",
    "<script>\n  import utils, { ClassBuilder, filterProps } from \"../../utils/classes.js\";\n\n  let className = \"\";\n  export {className as class};\n  export let noUnderline = false;\n  export let outlined = false;\n  export let focused = false;\n  export let error = false;\n  export let color = \"primary\";\n\n  let defaultClasses = `mx-auto w-0`;\n\n  export let add = \"\";\n  export let remove = \"\";\n  export let replace = \"\";\n\n  export let lineClasses = defaultClasses;\n\n  const {\n    bg,\n    border,\n    txt,\n    caret,\n  } = utils(color);\n\n  const l = new ClassBuilder(lineClasses, defaultClasses);\n\n  let Classes = i => i;\n\n  $: classes = l\n      .flush()\n      .add(txt(), focused && !error)\n      .add('bg-error-500', error)\n      .add('w-full', focused || error)\n      .add(bg(), focused)\n      .add(add)\n      .remove(remove)\n      .replace(replace)\n      .get();\n\n  const props = filterProps([\n    'focused',\n    'error',\n    'outlined',\n    'labelOnTop',\n    'prepend',\n    'bgcolor',\n    'color'\n  ], $$props);\n</script>\n\n<style>\n.line {\n  height: 1px;\n}\n</style>\n\n<div\n  class=\"line absolute bottom-0 left-0 w-full bg-gray-600 {className}\"\n  class:hidden={noUnderline || outlined}>\n  <div\n    class=\"{classes}\"\n    style=\"height: 2px; transition: width .2s ease\" />\n</div>",
    "<script>\n  import { createEventDispatcher, onDestroy } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let offset = 0;\n  export let throttle = 250;\n  export let c = '';\n  export let style = '';\n  export let once = true;\n  export let threshold = 1.0;\n  export let disabled = false;\n\n  let className = \"\";\n  export { className as class };\n\n  let visible = disabled;\n  let wasVisible = false;\n  let intersecting = false;\n  let removeHandlers = () => {};\n\n  function throttleFn(fn, time) {\n    let last, deferTimer;\n\n    return () => {\n      const now = +new Date;\n\n      if (last && now < last + time) {\n        // hold on to it\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          fn();\n        }, time);\n      } else {\n        last = now;\n        fn();\n      }\n    };\n  }\n\n  function callEvents(wasVisible, observer, node) {\n    if (visible && !wasVisible) {\n      dispatch('enter');\n      return;\n    }\n\n    if (wasVisible && !intersecting) {\n      dispatch('leave');\n    }\n\n    if (once && wasVisible && !intersecting) {\n      removeHandlers();\n    }\n  }\n\n  function waypoint(node) {\n    if (!window || disabled) return;\n\n    if (window.IntersectionObserver && window.IntersectionObserverEntry) {\n      const observer = new IntersectionObserver(([ { isIntersecting } ]) => {\n        wasVisible = visible;\n\n        intersecting = isIntersecting;\n\n        if (wasVisible && once && !isIntersecting) {\n          callEvents(wasVisible, observer, node);\n          return;\n        }\n\n        visible = isIntersecting;\n\n        callEvents(wasVisible, observer, node);\n      }, {\n        rootMargin: offset + 'px',\n        threshold,\n      });\n\n      observer.observe(node);\n\n      removeHandlers = () => observer.unobserve(node);\n\n      return removeHandlers;\n    }\n\n    function checkIsVisible() {\n      // Kudos https://github.com/twobin/react-lazyload/blob/master/src/index.jsx#L93\n      if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return;\n\n      let top;\n      let height;\n\n      try {\n        ({ top, height } = node.getBoundingClientRect());\n      } catch (e) {\n        ({ top, height } = defaultBoundingClientRect);\n      }\n\n      const windowInnerHeight = window.innerHeight\n        || document.documentElement.clientHeight;\n\n      wasVisible = visible;\n      intersecting = (top - offset <= windowInnerHeight) &&\n        (top + height + offset >= 0);\n\n      if (wasVisible && once && !isIntersecting) {\n        callEvents(wasVisible, observer, node);\n        return;\n      }\n\n      visible = intersecting;\n\n      callEvents(wasVisible);\n    }\n\n    checkIsVisible();\n\n    const throttled = throttleFn(checkIsVisible, throttle);\n\n    window.addEventListener('scroll', throttled);\n    window.addEventListener('resize', throttled);\n\n    removeHandlers = () => {\n      window.removeEventListener('scroll', throttled);\n      window.removeEventListener('resize', throttled);\n    }\n\n    return removeHandlers;\n  }\n</script>\n\n<style>\n.wrapper {\n  display: inline-block;\n}\n</style>\n\n<div class=\"wrapper {className} {c}\" {style} use:waypoint>\n  {#if visible}\n    <slot />\n  {/if}\n</div>\n",
    "<script>\r\n    import Button from \"smelte/src/components/Button\";\r\n    import { push, querystring, location } from 'svelte-spa-router';\r\n\r\n    export let goto;\r\n    export let title;\r\n</script>\r\n\r\n<style>\r\n    #title {\r\n        margin-top: -4vh;\r\n    }\r\n</style>\r\n\r\n<div class=\"inset-x-0 top-0 mb-4\">\r\n        <div class='relative m-3 left-0 top-0 z-10'>\r\n            <Button color=\"primary\" icon=\"arrow_back\" on:click={() => push(goto) }/>\r\n            <h3 id=\"title\" class=\"text-center text-primary-500\">{title}</h3>\r\n        </div>\r\n</div>\r\n",
    "<style>\r\n    .loading {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-height: 100vh;\r\n        z-index: 10;\r\n    }\r\n\r\n    .lds-ring {\r\n        display: inline-block;\r\n        position: relative;\r\n        width: 14rem;\r\n        height: 14rem;\r\n    }\r\n    .lds-ring div {\r\n        box-sizing: border-box;\r\n        display: block;\r\n        position: absolute;\r\n        width: 14rem;\r\n        height: 14rem;\r\n        margin: 6px;\r\n        border: 18px solid #114b5f;\r\n        border-radius: 50%;\r\n        animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n        border-color: #114b5f transparent transparent transparent;\r\n    }\r\n    .lds-ring div:nth-child(1) {\r\n        animation-delay: -0.45s;\r\n    }\r\n    .lds-ring div:nth-child(2) {\r\n        animation-delay: -0.3s;\r\n    }\r\n    .lds-ring div:nth-child(3) {\r\n        animation-delay: -0.15s;\r\n    }\r\n    @keyframes lds-ring {\r\n        0% {\r\n            transform: rotate(0deg);\r\n        }\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n</style>\r\n\r\n<div class=\"loading\">\r\n    <div class=\"lds-ring\">\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n</div>\r\n",
    "<script>\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport mapboxgl from 'mapbox-gl';\r\n\timport { push } from 'svelte-spa-router';\r\n\timport distance from '@turf/distance';\r\n\r\n\timport { apiKeyStore, apiUrlStore, mapElementsStore } from '../store.js';\r\n\r\n\texport let lat;\r\n\texport let lon;\r\n\texport let zoom;\r\n\texport let mapElements;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet container;\r\n\tlet map;\r\n\tlet isMapLoaded = false; // TODO: refactor this pattern\r\n\tlet markers = [];\r\n\tlet coords = [];\r\n\r\n\t// Subscribe to the mapElementsStore that contains all the latest mapElements fetched from the API\r\n\tconst unsubscribe = mapElementsStore.subscribe(el => {\r\n\t\t\tmapElements = el;\r\n\r\n\t\t\t// TODO: refactor this pattern\r\n\t\t\tif (isMapLoaded) {\r\n\t\t\t\trefreshMap();\r\n\t\t\t}\r\n\t});\r\n\r\n\tonMount(async () => {\r\n        // Default Mapbox API key from the docs\r\n        mapboxgl.accessToken = 'pk.eyJ1IjoidmxhZG9za2kiLCJhIjoiY2szNzFrbnBqMDc0aDNjbnMxZ3R1cDlobCJ9.hrd1syWrQqTE-4Ucn0UW_w';\r\n\r\n\t\tmap = new mapboxgl.Map({\r\n\t\t\tcontainer,\r\n\t\t\tstyle: 'mapbox://styles/mapbox/streets-v9',\r\n\t\t\tcenter: [lon, lat],\r\n\t\t\tzoom,\r\n\t\t\tattributionControl: false, // Deletes the attribution control\r\n\t\t\tlogoPosition: 'top-left' // Moves the logo position up on the top left corner\r\n\t\t});\r\n\r\n\t\tmap.addControl(new mapboxgl.NavigationControl({\r\n\t\t\tshowCompass: true,\r\n\t\t\tshowZoom: false\r\n\t\t}));\r\n\r\n\t\t// Add location marker on the map and geolocation functionality\r\n\t\tconst geolocate = new mapboxgl.GeolocateControl({\r\n\t\t\tpositionOptions: {\r\n\t\t\t\tenableHighAccuracy: true,\r\n\t\t\t},\r\n\t\t\ttrackUserLocation: true,\r\n\t\t\tshowUserLocation: true\r\n\t\t});\r\n\r\n\t\tmap.addControl(geolocate);\r\n\r\n\t\t// Moves the attribution up in the left corner\r\n\t\tmap.on('load', function() {\r\n\t\t\tmap.addControl(new mapboxgl.AttributionControl(), 'top-right');\r\n\t\t\tgeolocate.trigger();\r\n\r\n\t\t\trefreshMap();\r\n\t\t\tisMapLoaded = true; // TODO: refactor this pattern\r\n\t\t});\r\n\r\n\t\t// Gives only the first time the current position of the device\r\n\t\tnavigator.geolocation.getCurrentPosition(position => {\r\n\t\t\tcoords = [position.coords.latitude, position.coords.longitude];\r\n\t\t},\r\n\t\terr => {\r\n\t\t\t// TODO: handler errors if the location retrieval has problems\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n\r\n\t\t// Gives the device position everytime that it's changed\r\n\t\tnavigator.geolocation.watchPosition(position => {\r\n\t\t\tcoords = [position.coords.latitude, position.coords.longitude];\r\n\t\t},\r\n\t\terr => {\r\n\t\t\t// TODO: handler errors if the location retrieval has problems\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n\r\n\t\t// Could be useful for memory leaks\r\n\t\treturn () => {\r\n\t\t\tmap.remove();\r\n\t\t};\r\n\t});\r\n\r\n\tfunction refreshMap() {\r\n\t\t\tif (mapElements !== undefined && Array.isArray(mapElements)) {\r\n\t\t\t\t// Delete all current elements\r\n\t\t\t\t// TODO: check this because the API doesn't refresh the elements after being eaten/fought\r\n\t\t\t\tmarkers.forEach(element => element.remove());\r\n\t\t\t\tmarkers = [];\r\n\r\n\t\t\t\tmapElements.forEach(element => {\r\n\t\t\t\t\tlet icon = document.createElement('div');\r\n\t\t\t\t\ticon.className = 'marker';\r\n\t\t\t\t\ticon.id = element.id;\r\n\t\t\t\t\ticon.style.width = '3rem';\r\n\t\t\t\t\ticon.style.height = '3rem';\r\n\t\t\t\t\ticon.style.backgroundSize = 'contain';\r\n\r\n\t\t\t\t\t// TODO: refactor this\r\n\t\t\t\t\tif (element.type == \"CA\") {\r\n\t\t\t\t\t\tif (element.size == \"M\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/candy_m.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (element.size == \"L\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/candy_l.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (element.size == \"S\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/candy_s.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (element.type == \"MO\") {\r\n\t\t\t\t\t\tif (element.size == \"M\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/monster_m.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (element.size == \"L\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/monster_l.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (element.size == \"S\") {\r\n\t\t\t\t\t\t\ticon.style.backgroundImage = 'url(img/monster_s.png)';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Goes to the fighteat passing the element id in the querystring\r\n\t\t\t\t\ticon.addEventListener('click', () => {\r\n\t\t\t\t\t\t// If the distance between the mapelement and the player is greater than half a km then fighteat else display error message\r\n\t\t\t\t\t\t// TODO: delete the true eval. if needed\r\n\t\t\t\t\t\tif (true || coords.length == 2 && (distance([element.lat, element.lon], coords) == 0.5)) {\r\n\t\t\t\t\t\t\tpush(`/fighteat?id=${icon.id}`);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdispatch('mapElementTooFar');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet newMarker = new mapboxgl.Marker(icon)\r\n\t\t\t\t\t\t.setLngLat([parseFloat(element.lon), parseFloat(element.lat)])\r\n\t\t\t\t\t\t.addTo(map);\r\n\r\n\t\t\t\t\tmarkers = [newMarker, ...markers];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n</script>\r\n\r\n<style>\r\n\t#mapbox {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\twidth: 100%;\r\n\t}\r\n</style>\r\n\r\n<svelte:head>\r\n\t<link rel=\"stylesheet\" href=\"mapbox-gl.css\">\r\n</svelte:head>\r\n\r\n<div id=\"mapbox\" bind:this={container}>\r\n\t{#if map}\r\n\t\t<slot></slot>\r\n\t{/if}\r\n</div>",
    "<script>\r\n  import { ClassBuilder } from \"smelte/src/utils/classes.js\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import Icon from \"smelte/src/components/Icon\";\r\n  import Image from 'smelte/src/components/Image';\r\n  import createRipple from \"smelte/src/components/Ripple/ripple.js\";\r\n\r\n  const classesDefault = \"focus:bg-gray-50 dark-focus:bg-gray-700 hover:bg-gray-transDark relative overflow-hidden transition-fast p-4 cursor-pointer text-gray-700 dark:text-gray-100 flex items-center z-10\";\r\n  const selectedClassesDefault = \"bg-gray-200 dark:bg-primary-transLight\";\r\n  const subheadingClassesDefault = \"text-gray-700 p-0 text-sm\";\r\n\r\n  export let image = \"\";\r\n  export let id = \"\";\r\n  export let value = \"\";\r\n  export let text = \"\";\r\n  export let subheading = \"\";\r\n  export let disabled = false;\r\n  export let dense = false;\r\n  export let selected = false;\r\n  export let tabindex = null;\r\n  export let selectedClasses = selectedClassesDefault;\r\n  export let subheadingClasses = subheadingClassesDefault;\r\n\r\n  let className = \"\";\r\n  export {className as class};\r\n\r\n  export let to = \"\";\r\n  export const item = null;\r\n  export const items = [];\r\n  export const level = null;\r\n\r\n  const ripple = createRipple();\r\n  const dispatch = createEventDispatcher();\r\n\r\n  function change() {\r\n    if (disabled) return;\r\n    value = id;\r\n    dispatch('change', id, to);\r\n  }\r\n\r\n  export let classes = classesDefault;\r\n  const cb = new ClassBuilder(classes, classesDefault);\r\n\r\n  $: c = cb\r\n    .flush()\r\n    .add(selectedClasses, selected, selectedClassesDefault)\r\n    .add(\"py-2\", dense)\r\n    .add(\"text-gray-600\", disabled)\r\n    .add(\"border\")\r\n    .add(className)\r\n    .get();\r\n    \r\n</script>\r\n\r\n<style>\r\n  .pushImage {\r\n    margin-right: 2.1rem;\r\n  }\r\n</style>\r\n\r\n<li\r\n  use:ripple\r\n  class={c}\r\n  {tabindex}\r\n  on:keypress={change}\r\n  on:click={change}\r\n  on:click>\r\n  <p class={tabindex < 4 ? \"text-3xl mr-5 text-right text-primary-500 text-secondary-500\" : 'text-3xl mr-5 text-right text-primary-500'}\r\n     class:pushImage={tabindex < 10}>{tabindex < 10 ? '\\xa0' + tabindex : tabindex}</p>\r\n  {#if image}\r\n    <Image\r\n      src={image}\r\n      class=\"rounded-full w-20 h-20\"\r\n      height={90}\r\n      width={90} />\r\n  {/if}\r\n\r\n  <div class=\"flex flex-col ml-5 p-0 text-gray-800\">\r\n    <div class={className}>\r\n      <slot>{text}</slot>\r\n    </div>\r\n    {#if subheading}\r\n      <div class={subheadingClasses}>{subheading}</div>\r\n    {/if}\r\n  </div>\r\n</li>\r\n",
    "<script>\r\n    import { onMount, onDestroy } from 'svelte';\r\n    import { push } from 'svelte-spa-router';\r\n    import { apiKeyStore, apiUrlStore, profileDataStore } from '../store.js';\r\n    import { setProfile } from '../utils/apihandler.js';\r\n\r\n    import Header from '../components/Header.svelte';\r\n\r\n    import TextField from 'smelte/src/components/TextField';\r\n    import Button from \"smelte/src/components/Button\";\r\n    \r\n    let username;\r\n    let profileImage;\r\n    let isImageValid = false;\r\n\r\n    let profileData;\r\n    const unsubscribe = profileDataStore.subscribe(_profileData => {\r\n        profileData = _profileData;\r\n        username = _profileData.username;\r\n        profileImage = _profileData.img;\r\n    });\r\n\r\n    function changeProfilePic() {\r\n        // Retrieve image file location from specified source\r\n        navigator.camera.getPicture(cameraCallback, cameraError, { quality: 50,\r\n            destinationType: Camera.DestinationType.DATA_URL,\r\n            correctOrientation: true,\r\n            mediaType: Camera.MediaType.PICTURE, \r\n            sourceType: Camera.PictureSourceType.SAVEDPHOTOALBUM});\r\n    }\r\n\r\n    function cameraCallback(imageData) {\r\n        if(imageData.length >= 137000){\r\n            alert(\"The image you picked is too big! Please select an image smaller than 100kb.\");\r\n            isImageValid = false;\r\n        } else {\r\n            profileImage = imageData;\r\n            isImageValid = true;\r\n        }\r\n    }\r\n\r\n    function cameraError(imageData) {\r\n        console.log(\"ERROR: Could not retreive image.\") // TODO: implement error visualisation\r\n    }\r\n\r\n    async function editProfile() {\r\n        const isResOk = await setProfile($apiUrlStore, $apiKeyStore, username, profileImage);\r\n        \r\n        if (isResOk) {\r\n            profileDataStore.update(data => {\r\n                data.username = username;\r\n                data.img = profileImage;\r\n\r\n                return data;\r\n            });\r\n\r\n            push('/profile');\r\n        }\r\n        \r\n    }\r\n\r\n    onDestroy(() => unsubscribe());\r\n</script>\r\n\r\n<style>\r\n    .ok-icon {\r\n        margin-left: 0.2rem !important;\r\n        font-size: 2rem !important;\r\n        line-height: 1.1;\r\n    }\r\n</style>\r\n\r\n<div class=\"mt-5\">\r\n    <Header \r\n        title=\"Edit profile\"\r\n        goto={'/profile'} />\r\n    <div class=\"flex justify-center\">\r\n        <TextField label=\"Username\" bind:value={username} outlined/>\r\n    </div>\r\n    <div class=\"flex content-end justify-center m-5\">\r\n        <Button on:click={changeProfilePic}>Upload new picture</Button>\r\n\r\n        {#if isImageValid}\r\n            <i aria-hidden=\"true\" class=\"material-icons text-secondary-500 ok-icon\">check_circle</i>\r\n        {/if}\r\n    </div>\r\n</div>\r\n<div class=\"flex content-end justify-center m-5\">\r\n    <div class=\"flex content-end justify-center m-5\">\r\n        <Button on:click={editProfile}>Edit profile</Button>\r\n    </div>\r\n</div>\r\n",
    "<script>\r\n    import { onMount } from 'svelte';\r\n    import { push } from 'svelte-spa-router';\r\n    import { apiKeyStore, apiUrlStore, profileDataStore } from '../store.js';\r\n    import { getProfile } from '../utils/apihandler.js';\r\n\r\n    import Header from '../components/Header.svelte';\r\n    import LoadingSpinner from '../components/LoadingSpinner.svelte';\r\n\r\n    import Image from 'smelte/src/components/Image';\r\n    import Button from \"smelte/src/components/Button\";\r\n    \r\n\r\n    let profileData;\r\n    let getProfilePromise = getProfile($apiUrlStore, $apiKeyStore)\r\n        .then(json => {\r\n            profileData = json;\r\n            profileDataStore.set(profileData);\r\n        });\r\n    \r\n\r\n</script>\r\n\r\n<style>\r\n    .stat-icon-size {\r\n        font-size: 5rem !important;\r\n        line-height: 1.1 !important;\r\n        margin-right: 1rem;\r\n    }\r\n</style>\r\n\r\n{#await getProfilePromise}\r\n    <LoadingSpinner />\r\n    {:then _}\r\n        <Header \r\n            title=\"Profile\"\r\n            goto={'/'}/>\r\n        <div class=\"flex content-center justify-center m-5\">\r\n            <Image\r\n                src={'data:image/jpeg;charset=utf-8;base64,' + profileData.img}\r\n                class=\"rounded-full h-48 w-48 border\"\r\n                alt=\"Profile image\"\r\n                height={180}\r\n                width={180}/>\r\n        </div>\r\n        <div class=\"text-gray-800\">\r\n            <div class=\"flex justify-center\">\r\n                <p class=\"h4\">{profileData.username}</p>\r\n            </div>\r\n            <div class=\"flex justify-center\">\r\n                <i aria-hidden=\"true\" class=\"material-icons icon stat-icon-size text-error-500\">favorite</i> <p class=\"text-4xl\"> {profileData.xp}</p>\r\n            </div>\r\n            <div class=\"flex justify-center\">\r\n                <i aria-hidden=\"true\" class=\"material-icons icon stat-icon-size text-secondary-500\">stars</i> <p class=\"text-4xl\"> {profileData.xp}</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"flex content-end justify-center m-5\">\r\n            <Button on:click={() => push('/profile/edit') }>Edit profile</Button>\r\n        </div>\r\n    {:catch}\r\n        <p>Error</p>\r\n{/await}\r\n"
  ],
  "names": [],
  "mappings": "AAsEE,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,QAAQ,AACnB,CAAC;AC7DD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC;AC2FD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,KAAK,AAClB,CAAC;ACpDH,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,iBAAiB,cAAC,CAAC,AACjB,UAAU,CAAE,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,IAAI,AAC/C,CAAC;ACVD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,AACb,CAAC;AC6ED,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,YAAY,AACvB,CAAC;AC7HG,MAAM,eAAC,CAAC,AACJ,UAAU,CAAE,IAAI,AACpB,CAAC;ACVD,QAAQ,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,EAAE,AACf,CAAC,AAED,SAAS,8BAAC,CAAC,AACP,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACjB,CAAC,AACD,wBAAS,CAAC,GAAG,eAAC,CAAC,AACX,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAC1B,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,uBAAQ,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAC9D,YAAY,CAAE,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,AAC7D,CAAC,AACD,wBAAS,CAAC,kBAAG,WAAW,CAAC,CAAC,AAAC,CAAC,AACxB,eAAe,CAAE,MAAM,AAC3B,CAAC,AACD,wBAAS,CAAC,kBAAG,WAAW,CAAC,CAAC,AAAC,CAAC,AACxB,eAAe,CAAE,KAAK,AAC1B,CAAC,AACD,wBAAS,CAAC,kBAAG,WAAW,CAAC,CAAC,AAAC,CAAC,AACxB,eAAe,CAAE,MAAM,AAC3B,CAAC,AACD,WAAW,uBAAS,CAAC,AACjB,EAAE,AAAC,CAAC,AACA,SAAS,CAAE,OAAO,IAAI,CAAC,AAC3B,CAAC,AACD,IAAI,AAAC,CAAC,AACF,SAAS,CAAE,OAAO,MAAM,CAAC,AAC7B,CAAC,AACL,CAAC;AC+GJ,OAAO,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,AACZ,CAAC;ACxGA,UAAU,cAAC,CAAC,AACV,YAAY,CAAE,MAAM,AACtB,CAAC;ACQC,QAAQ,aAAC,CAAC,AACN,WAAW,CAAE,MAAM,CAAC,UAAU,CAC9B,SAAS,CAAE,IAAI,CAAC,UAAU,CAC1B,WAAW,CAAE,GAAG,AACpB,CAAC;AC7CD,eAAe,cAAC,CAAC,AACb,SAAS,CAAE,IAAI,CAAC,UAAU,CAC1B,WAAW,CAAE,GAAG,CAAC,UAAU,CAC3B,YAAY,CAAE,IAAI,AACtB,CAAC"
}